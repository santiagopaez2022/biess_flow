<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="reglas"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
   <description>PMD Plugin preferences rule set</description>
   <rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod"/>
   <rule ref="rulesets/java/design.xml/AbstractClassWithoutAnyMethod"/>
   <rule ref="rulesets/java/naming.xml/AbstractNaming"/>
   <rule ref="rulesets/java/optimizations.xml/AddEmptyString"/>
   <rule ref="rulesets/java/strings.xml/AppendCharacterWithChar"/>
   <rule ref="rulesets/java/controversial.xml/AssignmentInOperand"/>
   <!--rule ref="rulesets/java/basic.xml/AssignmentInOperand"/-->
   <rule ref="rulesets/java/design.xml/AssignmentToNonFinalStatic"/>
   <rule ref="rulesets/java/controversial.xml/AtLeastOneConstructor"/>
   <rule ref="rulesets/java/controversial.xml/AvoidAccessibilityAlteration"/>
   <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops"/>
   <rule ref="rulesets/java/migrating.xml/AvoidAssertAsIdentifier"/>
   <rule ref="rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop"/>
   <rule ref="rulesets/java/finalizers.xml/AvoidCallingFinalize"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidCatchingNPE"/>
   <rule ref="rulesets/java/design.xml/AvoidConstantsInterface"/>
   <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
   <rule ref="rulesets/java/design.xml/AvoidDeeplyNestedIfStmts"/>
   <rule ref="rulesets/java/naming.xml/AvoidDollarSigns"/>
   <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals"/>
   <rule ref="rulesets/java/migrating.xml/AvoidEnumAsIdentifier"/>
   <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName"/>
   <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName"/>
   <rule ref="rulesets/java/controversial.xml/AvoidFinalLocalVariable"/>
   <rule ref="rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause"/>
   <rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators"/>
   <rule ref="rulesets/java/design.xml/AvoidProtectedFieldInFinalClass"/>
   <rule ref="rulesets/java/design.xml/AvoidReassigningParameters"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidRethrowingException"/>
   <rule ref="rulesets/java/design.xml/AvoidSynchronizedAtMethodLevel"/>
   <rule ref="rulesets/java/basic.xml/AvoidThreadGroup"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNullPointerException"/>
   <!--rule ref="rulesets/java/basic.xml/AvoidTrailingComma"/-->
   <rule ref="rulesets/java/basic.xml/AvoidUsingHardCodedIP"/>
   <rule ref="rulesets/java/basic.xml/AvoidUsingOctalValues"/>
   <rule ref="rulesets/java/controversial.xml/AvoidUsingShortType"/>
   <rule ref="rulesets/java/controversial.xml/AvoidUsingVolatile"/>
   <rule ref="rulesets/java/design.xml/BadComparison"/>
   <rule ref="rulesets/java/javabeans.xml/BeanMembersShouldSerialize"/>
   <rule ref="rulesets/java/basic.xml/BigIntegerInstantiation"/>
   <rule ref="rulesets/java/naming.xml/BooleanGetMethodName"/>
   <rule ref="rulesets/java/basic.xml/BooleanInstantiation"/>
   <!--rule ref="rulesets/java/controversial.xml/BooleanInversion"/-->
   <rule ref="rulesets/java/basic.xml/BrokenNullCheck"/>
   <rule ref="rulesets/java/migrating.xml/ByteInstantiation"/>
   <rule ref="rulesets/java/controversial.xml/CallSuperInConstructor"/>
   <rule ref="rulesets/java/android.xml/CallSuperLast"/>
   <rule ref="rulesets/java/basic.xml/CheckResultSet"/>
   <rule ref="rulesets/java/basic.xml/ClassCastExceptionWithToArray"/>
   <rule ref="rulesets/java/naming.xml/ClassNamingConventions"/>
   <rule ref="rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
   <rule ref="rulesets/java/clone.xml/CloneMethodMustImplementCloneable"/>
   <rule ref="rulesets/java/clone.xml/CloneThrowsCloneNotSupportedException"/>
   <rule ref="rulesets/java/design.xml/CloseResource"/>
   <rule ref="rulesets/java/basic.xml/CollapsibleIfStatements"/>
   <rule ref="rulesets/java/design.xml/CompareObjectsWithEquals"/>
   <rule ref="rulesets/java/design.xml/ConfusingTernary"/>
   <rule ref="rulesets/java/strings.xml/ConsecutiveLiteralAppends"/>
   <!--rule ref="rulesets/java/basic.xml/ConsistentReturn"/-->
   <rule ref="rulesets/java/design.xml/ConstructorCallsOverridableMethod"/>
   <rule ref="rulesets/java/coupling.xml/CouplingBetweenObjects"/>
   <rule ref="rulesets/java/codesize.xml/CyclomaticComplexity"/>
   <rule ref="rulesets/java/design.xml/DefaultLabelNotLastInSwitchStmt"/>
   <rule ref="rulesets/java/controversial.xml/DefaultPackage"/>
   <rule ref="rulesets/java/controversial.xml/DoNotCallGarbageCollectionExplicitly"/>
   <rule ref="rulesets/java/j2ee.xml/DoNotCallSystemExit"/>
   <rule ref="rulesets/java/strictexception.xml/DoNotExtendJavaLangError"/>
   <rule ref="rulesets/java/android.xml/DoNotHardCodeSDCard"/>
   <rule ref="rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally"/>
   <rule ref="rulesets/java/imports.xml/DontImportJavaLang"/>
   <rule ref="rulesets/java/controversial.xml/DontImportSun"/>
   <rule ref="rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices"/>
   <rule ref="rulesets/java/imports.xml/DuplicateImports"/>
   <!--rule ref="rulesets/java/basic.xml/EmptyCatchBlock"/-->
   <rule ref="rulesets/java/finalizers.xml/EmptyFinalizer"/>
   <!--rule ref="rulesets/java/basic.xml/EmptyFinallyBlock"/>
   <rule ref="rulesets/java/basic.xml/EmptyIfStmt"/>
   <rule ref="rulesets/java/basic.xml/EmptyInitializer"/-->
   <rule ref="rulesets/java/design.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
   <!--rule ref="rulesets/java/basic.xml/EmptyStatementBlock"/>
   <rule ref="rulesets/java/basic.xml/EmptyStatementNotInLoop"/>
   <rule ref="rulesets/java/basic.xml/EmptyStaticInitializer"/>
   <rule ref="rulesets/java/basic.xml/EmptySwitchStatements"/>
   <rule ref="rulesets/java/basic.xml/EmptySynchronizedBlock"/>
   <rule ref="rulesets/java/basic.xml/EmptyTryBlock"/>
   <rule ref="rulesets/java/basic.xml/EmptyWhileStmt"/>
   <rule ref="rulesets/java/basic.xml/EqualComparison"/-->
   <rule ref="rulesets/java/design.xml/EqualsNull"/>
   <rule ref="rulesets/java/strictexception.xml/ExceptionAsFlowControl"/>
   <rule ref="rulesets/java/codesize.xml/ExcessiveClassLength"/>
   <rule ref="rulesets/java/coupling.xml/ExcessiveImports"/>
   <rule ref="rulesets/java/codesize.xml/ExcessiveMethodLength"/>
   <rule ref="rulesets/java/codesize.xml/ExcessiveParameterList"/>
   <rule ref="rulesets/java/codesize.xml/ExcessivePublicCount"/>
   <rule ref="rulesets/java/basic.xml/ExtendsObject"/>
   <rule ref="rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass"/>
   <rule ref="rulesets/java/design.xml/FinalFieldCouldBeStatic"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeDoesNotCallSuperFinalize"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeOnlyCallsSuperFinalize"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeOverloaded"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeShouldBeProtected"/>
   <rule ref="rulesets/java/basic.xml/ForLoopShouldBeWhileLoop"/>
   <rule ref="rulesets/java/design.xml/GodClass"/>
   <rule ref="rulesets/java/design.xml/IdempotentOperations"/>
   <rule ref="rulesets/java/imports.xml/ImportFromSamePackage"/>
   <rule ref="rulesets/java/strings.xml/InefficientStringBuffering"/>
   <rule ref="rulesets/java/design.xml/InstantiationToGetClass"/>
   <rule ref="rulesets/java/migrating.xml/IntegerInstantiation"/>
   <rule ref="rulesets/java/basic.xml/JumbledIncrementer"/>
   <rule ref="rulesets/java/design.xml/LogicInversion"/>
   <rule ref="rulesets/java/migrating.xml/LongInstantiation"/>
   <rule ref="rulesets/java/coupling.xml/LooseCoupling"/>
   <rule ref="rulesets/java/naming.xml/MethodNamingConventions"/>
   <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass"/>
   <rule ref="rulesets/java/basic.xml/MisplacedNullCheck"/>
   <rule ref="rulesets/java/design.xml/MissingBreakInSwitch"/>
   <rule ref="rulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass"/>
   <rule ref="rulesets/java/logging-java.xml/MoreThanOneLogger"/>
   <rule ref="rulesets/java/codesize.xml/NPathComplexity"/>
   <rule ref="rulesets/java/naming.xml/NoPackage"/>
   <rule ref="rulesets/java/design.xml/NonCaseLabelInSwitchStatement"/>
   <rule ref="rulesets/java/design.xml/OptimizableToArrayCall"/>
   <rule ref="rulesets/java/basic.xml/OverrideBothEqualsAndHashcode"/>
   <rule ref="rulesets/java/naming.xml/PackageCase"/>
   <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInComparisons"/>
   <rule ref="rulesets/java/design.xml/PreserveStackTrace"/>
   <rule ref="rulesets/java/optimizations.xml/RedundantFieldInitializer"/>
   <rule ref="rulesets/java/migrating.xml/ReplaceHashtableWithMap"/>
   <rule ref="rulesets/java/migrating.xml/ReplaceVectorWithList"/>
   <rule ref="rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull"/>
   <rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock"/>
   <!--rule ref="rulesets/java/basic.xml/ScopeForInVariable"/-->
   <rule ref="rulesets/java/naming.xml/ShortClassName"/>
   <rule ref="rulesets/java/migrating.xml/ShortInstantiation"/>
   <rule ref="rulesets/java/naming.xml/ShortMethodName"/>
   <rule ref="rulesets/java/junit.xml/SimplifyBooleanAssertion"/>
   <rule ref="rulesets/java/design.xml/SimplifyBooleanExpressions"/>
   <rule ref="rulesets/java/design.xml/SimplifyBooleanReturns"/>
   <rule ref="rulesets/java/design.xml/SimplifyConditional"/>
   <rule ref="rulesets/java/j2ee.xml/StaticEJBFieldShouldBeFinal"/>
   <rule ref="rulesets/java/strings.xml/StringInstantiation"/>
   <rule ref="rulesets/java/strings.xml/StringToString"/>
   <rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName"/>
   <rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName"/>
   <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName"/>
   <rule ref="rulesets/java/design.xml/SwitchDensity"/>
   <rule ref="rulesets/java/design.xml/SwitchStmtsShouldHaveDefault"/>
   <rule ref="rulesets/java/codesize.xml/TooManyFields"/>
   <rule ref="rulesets/java/codesize.xml/TooManyMethods"/>
   <rule ref="rulesets/java/imports.xml/TooManyStaticImports"/>
   <!--rule ref="rulesets/java/design.xml/UncommentedEmptyMethod"/-->
   <rule ref="rulesets/java/basic.xml/UnconditionalIfStatement"/>
   <!--rule ref="rulesets/java/unnecessary.xml/UnnecessaryBlock"/-->
   <rule ref="rulesets/java/strings.xml/UnnecessaryCaseChange"/>
   <rule ref="rulesets/java/controversial.xml/UnnecessaryConstructor"/>
   <!--rule ref="rulesets/java/basic.xml/UnnecessaryConversionTemporary"/-->
   <!--rule ref="rulesets/java/basic.xml/UnnecessaryFinalModifier"/-->
   <rule ref="rulesets/java/imports.xml/UnnecessaryFullyQualifiedName"/>
   <rule ref="rulesets/java/design.xml/UnnecessaryLocalBeforeReturn"/>
   <rule ref="rulesets/java/controversial.xml/UnnecessaryParentheses"/>
   <!--rule ref="rulesets/java/unnecessary.xml/UnnecessaryParentheses"/-->
   <!--rule ref="rulesets/java/basic.xml/UnnecessaryReturn"/-->
   <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation"/>
   <!--rule ref="rulesets/java/basic.xml/UnreachableCode"/-->
   <rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter"/>
   <rule ref="rulesets/java/imports.xml/UnusedImports"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedLocalVariable"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedModifier"/>
   <!--rule ref="rulesets/java/basic.xml/UnusedNullCheckInEquals"/-->
   <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateField"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateMethod"/>
   <rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector"/>
   <rule ref="rulesets/java/optimizations.xml/UseArraysAsList"/>
   <rule ref="rulesets/java/design.xml/UseCollectionIsEmpty"/>
   <rule ref="rulesets/java/strings.xml/UseEqualsToCompareStrings"/>
   <rule ref="rulesets/java/strings.xml/UseIndexOfChar"/>
   <rule ref="rulesets/java/controversial.xml/UseObjectForClearerAPI"/>
   <rule ref="rulesets/java/design.xml/UseSingleton"/>
   <!--rule ref="rulesets/java/basic.xml/UselessOverridingMethod"/-->
   <!--rule ref="rulesets/java/basic.xml/UselessParentheses"/-->
   <rule ref="rulesets/java/strings.xml/UselessStringValueOf"/>
   <rule ref="rulesets/java/naming.xml/VariableNamingConventions"/>
</ruleset>